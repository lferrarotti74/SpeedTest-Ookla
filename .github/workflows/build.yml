name: Build release image

# Add permissions block
permissions:
  contents: read
  packages: write

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'information'
        type: choice
        options:
          - information
          - debug
          - warning
          - critical
      tags:
        description: 'Purpose of Run This Workflow?'
        required: true
        type: string
      force_build:
        description: 'Force build even if no base image updates'
        required: false
        default: 'false'
        type: boolean
  push:
    branches:
      - "main"
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    types: [opened, synchronize, reopened]
  # NEW: Schedule for checking Alpine Linux updates
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/speedtest-ookla
  GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/speedtest-ookla

jobs:
  # NEW: Check if base image (Alpine) has been updated
  check-base-image:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    outputs:
      should_build: ${{ steps.check-image.outputs.should_build }}
      update_reason: ${{ steps.check-image.outputs.update_reason }}
      alpine_digest: ${{ steps.check-image.outputs.digest }}
    steps:
      - name: Check Alpine Linux updates
        id: check-image
        run: |
          echo "🔍 Checking Alpine Linux for updates..."
          
          # Get current digest from Docker Hub
          NEW_DIGEST=$(docker buildx imagetools inspect alpine:latest --format "{{.Manifest.Digest}}")
          echo "Current Alpine digest: $NEW_DIGEST"
          
          # Get stored digest from GitHub Variables
          STORED_DIGEST="${{ vars.ALPINE_DIGEST }}"
          echo "Stored Alpine digest: $STORED_DIGEST"
          
          # Check if we should build
          if [ "$NEW_DIGEST" != "$STORED_DIGEST" ] || [ -z "$STORED_DIGEST" ]; then
            echo "✅ Alpine Linux has been updated! Build will proceed."
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "digest=$NEW_DIGEST" >> $GITHUB_OUTPUT
            echo "update_reason=Alpine Linux base image updated (digest: ${NEW_DIGEST:0:12}...)" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No Alpine update detected. Skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  print-tag:
    runs-on: ubuntu-latest
    # Only run if it's not a scheduled run, OR if it's scheduled and base image updated
    if: github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true'
    needs: [check-base-image]
    steps:
      - name: Print the purpose of run
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "Purpose of Run: ${{ needs.check-base-image.outputs.update_reason }}"
          else
            echo "Purpose of Run: ${{ inputs.tags || 'Code changes or manual trigger' }}"
          fi

  # SonarQube Analysis Job
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' || github.event_name == 'pull_request') || (github.event_name == 'schedule' && needs.check-base-image.outputs.should_build == 'true')
    needs: [check-base-image]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=lferrarotti74_SpeedTest-Ookla
            -Dsonar.organization=lferrarotti74
        
  build:
    runs-on: ubuntu-latest
    # Only run if it's not a scheduled run, OR if it's scheduled and base image updated
    if: github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true'
    needs: [check-base-image]
    strategy:
      matrix:
        platform: [
          {name: "linux/amd64", tag: "amd64"},
          {name: "linux/i386", tag: "i386"},
          {name: "linux/arm/v7", tag: "armv7"},
          {name: "linux/arm64", tag: "arm64"}
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set Environment
        uses: c-py/action-dotenv-to-setenv@v5
        id: source-env
        with:
          env-file: env/.env
          
      - name: Echo Speedtest Version from env file
        run: | 
          echo ${{ steps.source-env.outputs.speedtest_version }} >> "$GITHUB_ENV"

      - name: Log build trigger reason
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "🔄 Build triggered by: ${{ needs.check-base-image.outputs.update_reason }}"
          else
            echo "🚀 Build triggered by: ${{ github.event_name }}"
          fi
        
      - name: Prepare
        run: |
          platform=${{ matrix.platform.name }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> "$GITHUB_ENV"
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          # Add special tag for base image updates
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.SPEEDTEST_VERSION }},enable={{is_default_branch}}
            type=raw,value=alpine-update-{{date 'YYYY-MM-DD'}},enable=${{ github.event_name == 'schedule' }}
   
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up QEMU for Multi-Arch Builds
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform.name }}

      - name: Verify QEMU Installation
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          echo "QEMU has been set up successfully."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      # Add caching for Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.platform.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.platform.name }}-
            ${{ runner.os }}-buildx-
        
      - name: Build and Push Image by Digest
        id: build
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          platforms: ${{ matrix.platform.name }}
          build-args: VERSION=${{ env.SPEEDTEST_VERSION }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.description=Speedtest CLI built on Alpine Linux
            ${{ github.event_name == 'schedule' && format('alpine.base.updated={0}', needs.check-base-image.outputs.alpine_digest) || '' }}
          provenance: mode=max
          sbom: true
          outputs: type=image,name=${{ env.GHCR_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # This is a workaround to prevent cache size from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Debug DOCKER_METADATA_OUTPUT_JSON
        run: |
          echo "$DOCKER_METADATA_OUTPUT_JSON"
          
      - name: Export Digests
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          
      - name: Upload Digest
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: 
      - build
      - check-base-image
    if: github.event_name != 'pull_request' && (github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set Environment
        uses: c-py/action-dotenv-to-setenv@v5
        id: source-env
        with:
          env-file: env/.env
          
      - name: Echo Speedtest Version from env file
        run: | 
          echo ${{ steps.source-env.outputs.speedtest_version }} >> "$GITHUB_ENV"
      
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
          
      - name: List digests downloaded
        run: |
          echo "Digest files retrieved:"
          ls -l /tmp/digests
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
            ${{ env.GHCR_IMAGE }}

      - name: Create manifest list and push to Docker Hub
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:latest \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:${{ env.SPEEDTEST_VERSION }} \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          
          # Add special tag for base image updates
          if [ "${{ github.event_name }}" == "schedule" ]; then
            docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:alpine-update-$(date +%Y-%m-%d) \
              $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          fi

      - name: Create manifest list and push to GHCR
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --tag ${{ env.GHCR_IMAGE }}:latest \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          docker buildx imagetools create --tag ${{ env.GHCR_IMAGE }}:${{ env.SPEEDTEST_VERSION }} \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          
          # Add special tag for base image updates
          if [ "${{ github.event_name }}" == "schedule" ]; then
            docker buildx imagetools create --tag ${{ env.GHCR_IMAGE }}:alpine-update-$(date +%Y-%m-%d) \
              $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          fi
            
      - name: Inspect image
        run: |
          echo "Docker Hub images:"
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:latest
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ env.SPEEDTEST_VERSION }}
          echo "GHCR images:"
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:latest
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:${{ env.SPEEDTEST_VERSION }}

      # NEW: Update stored Alpine digest after successful build
      - name: Update stored Alpine digest
        if: github.event_name == 'schedule' && needs.check-base-image.outputs.alpine_digest != ''
        run: |
          echo "📝 Updating stored Alpine digest to: ${{ needs.check-base-image.outputs.alpine_digest }}"
          gh variable set ALPINE_DIGEST --body "${{ needs.check-base-image.outputs.alpine_digest }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # NEW: Build Summary
  build-summary:
    runs-on: ubuntu-latest
    needs: [check-base-image, build, merge]
    if: always()
    steps:
      - name: Generate Build Summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "schedule" ]; then
            if [ "${{ needs.check-base-image.outputs.should_build }}" == "true" ]; then
              echo "**Status:** ✅ Alpine Linux updated - Build completed" >> $GITHUB_STEP_SUMMARY
              echo "**Reason:** ${{ needs.check-base-image.outputs.update_reason }}" >> $GITHUB_STEP_SUMMARY
              echo "**New Alpine Digest:** \`${{ needs.check-base-image.outputs.alpine_digest }}\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** ⏭️ No updates detected - Build skipped" >> $GITHUB_STEP_SUMMARY
              echo "**Reason:** Alpine Linux digest unchanged" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Status:** ✅ Build completed" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** Code changes or manual trigger" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Images Built:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.GHCR_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Multi-arch build successful** for platforms:" >> $GITHUB_STEP_SUMMARY
            echo "- linux/amd64, linux/i386, linux/arm/v7, linux/arm64" >> $GITHUB_STEP_SUMMARY
          fi
