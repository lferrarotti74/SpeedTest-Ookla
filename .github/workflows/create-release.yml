name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. v6.12-r0)'
        required: true
        type: string
      dry_run:
        description: 'Dry-run mode (no tag/release creation)'
        required: true
        default: 'false'
        type: boolean
      force:
        description: 'Force overwrite existing tag'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write  # Needed to push tags and create releases
  actions: read

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Prepare variables
        id: vars
        run: |
          TAG="${{ github.event.inputs.version }}"
          FORCE="${{ github.event.inputs.force }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          PREFIX="${REPO_NAME}-${TAG}/"

          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "FORCE=$FORCE" >> $GITHUB_OUTPUT
          echo "DRY_RUN=$DRY_RUN" >> $GITHUB_OUTPUT
          echo "PREFIX=$PREFIX" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.vars.outputs.TAG }}" =~ ^v[0-9]+\.[0-9]+(-r[0-9]+)?$ ]]; then
            echo "❌ Invalid version format. Use vX.Y or vX.Y-rZ."
            exit 1
          fi

      - name: Check for uncommitted changes in repo
        run: |
          if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "❌ There are uncommitted changes. Commit or stash them first."
            exit 1
          fi

      - name: Fetch and check if local branch is in sync with remote
        run: |
          git fetch origin
          LOCAL_HEAD=$(git rev-parse HEAD)
          REMOTE_HEAD=$(git rev-parse origin/$(git rev-parse --abbrev-ref HEAD))
          if [ "$LOCAL_HEAD" != "$REMOTE_HEAD" ]; then
            echo "❌ Local branch is out of sync with remote. Push or pull first."
            exit 1
          fi

      - name: Check for uncommitted changes in submodules
        run: |
          if [ -n "$(git submodule foreach --quiet 'git diff --quiet || echo $path')" ]; then
            echo "❌ There are uncommitted changes in submodules."
            exit 1
          fi

      - name: Check if tag exists and handle force mode
        run: |
          git fetch --tags
          if git rev-parse "${{ steps.vars.outputs.TAG }}" >/dev/null 2>&1; then
            if [ "${{ steps.vars.outputs.FORCE }}" != "true" ]; then
              echo "❌ Tag '${{ steps.vars.outputs.TAG }}' already exists. Use force=true to overwrite."
              exit 1
            else
              echo "⚠ Force mode: deleting existing tag '${{ steps.vars.outputs.TAG }}'."
              git tag -d "${{ steps.vars.outputs.TAG }}" || true
              git push origin ":refs/tags/${{ steps.vars.outputs.TAG }}" || true
            fi
          fi

      - name: Dry-run check
        if: steps.vars.outputs.DRY_RUN == 'true'
        run: |
          echo "🛠 Dry-run mode enabled — will NOT create archive or push tag."
          echo "Would create release for tag: ${{ steps.vars.outputs.TAG }}"
          exit 0

      - name: Create git tag and push
        run: |
          git tag "${{ steps.vars.outputs.TAG }}"
          git push origin "${{ steps.vars.outputs.TAG }}"

      - name: Create release archives
        run: |
          mkdir -p release
          git archive --format=tar.gz --prefix="${{ steps.vars.outputs.PREFIX }}" HEAD \
            -- . ':!*.git*' '.github' > "release/${{ steps.vars.outputs.TAG }}.tar.gz"
          git archive --format=zip --prefix="${{ steps.vars.outputs.PREFIX }}" HEAD \
            -- . ':!*.git*' '.github' > "release/${{ steps.vars.outputs.TAG }}.zip"

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.vars.outputs.TAG }}
          files: |
            release/${{ steps.vars.outputs.TAG }}.tar.gz
            release/${{ steps.vars.outputs.TAG }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
